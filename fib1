module fib_G(in, out);
    input [3:0]in;
    output out;
    
    //your code here
    wire not_a, not_b, not_c, not_d;
    wire nand0,nand1,nand2,nand3;
    
    nand not_0(not_a,in[0]);
    nand not_1(not_b,in[1]);
    nand not_2(not_c,in[2]);
    nand not_3(not_d,in[3]);
    
    nand and_0(nand0,not_a,not_b);
    nand and_1(nand1,not_a,not_c,in[3]);
    nand and_2(nand2,in[1],not_c,in[3]);
    nand and_3(nand3,not_b,not_c,not_d);
    
    nand or_0(out,nand0,nand1,nand2,nand3);
    
endmodule

module fib_D(in, out);
    input [3:0]in;
    output out;
    
    //your code here
    assign out=(!in[0]&!in[1])|(!in[0]&!in[2]&in[3])|(in[1]&!in[2]&!in[3])|(!in[1]&!in[2]&!in[3]);


endmodule

module fib_B(in, out);
    input [3:0]in;
    output out;
    
    //wryyyyy
    reg out;//It must be changed to reg type because of using in always block.
            
    always@(*)begin
        case(in)
            0,1,5,7:begin
                out=1'b1;
            end
            default:begin
                out=1'b0;
                end
        endcase
    end
    
endmodule
